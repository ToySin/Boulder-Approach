// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: boulder_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BoulderApproachService_GetApproach_FullMethodName    = "/api.BoulderApproachService/GetApproach"
	BoulderApproachService_GetBoulder_FullMethodName     = "/api.BoulderApproachService/GetBoulder"
	BoulderApproachService_ListBoulders_FullMethodName   = "/api.BoulderApproachService/ListBoulders"
	BoulderApproachService_CreateApproach_FullMethodName = "/api.BoulderApproachService/CreateApproach"
)

// BoulderApproachServiceClient is the client API for BoulderApproachService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoulderApproachServiceClient interface {
	GetApproach(ctx context.Context, in *GetApproachRequest, opts ...grpc.CallOption) (*GetApproachResponse, error)
	GetBoulder(ctx context.Context, in *GetBoulderRequest, opts ...grpc.CallOption) (*GetBoulderResponse, error)
	ListBoulders(ctx context.Context, in *ListBouldersRequest, opts ...grpc.CallOption) (*ListBouldersResponse, error)
	CreateApproach(ctx context.Context, in *CreateApproachRequest, opts ...grpc.CallOption) (*CreateApproachResponse, error)
}

type boulderApproachServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoulderApproachServiceClient(cc grpc.ClientConnInterface) BoulderApproachServiceClient {
	return &boulderApproachServiceClient{cc}
}

func (c *boulderApproachServiceClient) GetApproach(ctx context.Context, in *GetApproachRequest, opts ...grpc.CallOption) (*GetApproachResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApproachResponse)
	err := c.cc.Invoke(ctx, BoulderApproachService_GetApproach_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boulderApproachServiceClient) GetBoulder(ctx context.Context, in *GetBoulderRequest, opts ...grpc.CallOption) (*GetBoulderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBoulderResponse)
	err := c.cc.Invoke(ctx, BoulderApproachService_GetBoulder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boulderApproachServiceClient) ListBoulders(ctx context.Context, in *ListBouldersRequest, opts ...grpc.CallOption) (*ListBouldersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBouldersResponse)
	err := c.cc.Invoke(ctx, BoulderApproachService_ListBoulders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boulderApproachServiceClient) CreateApproach(ctx context.Context, in *CreateApproachRequest, opts ...grpc.CallOption) (*CreateApproachResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateApproachResponse)
	err := c.cc.Invoke(ctx, BoulderApproachService_CreateApproach_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoulderApproachServiceServer is the server API for BoulderApproachService service.
// All implementations must embed UnimplementedBoulderApproachServiceServer
// for forward compatibility
type BoulderApproachServiceServer interface {
	GetApproach(context.Context, *GetApproachRequest) (*GetApproachResponse, error)
	GetBoulder(context.Context, *GetBoulderRequest) (*GetBoulderResponse, error)
	ListBoulders(context.Context, *ListBouldersRequest) (*ListBouldersResponse, error)
	CreateApproach(context.Context, *CreateApproachRequest) (*CreateApproachResponse, error)
	mustEmbedUnimplementedBoulderApproachServiceServer()
}

// UnimplementedBoulderApproachServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBoulderApproachServiceServer struct {
}

func (UnimplementedBoulderApproachServiceServer) GetApproach(context.Context, *GetApproachRequest) (*GetApproachResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApproach not implemented")
}
func (UnimplementedBoulderApproachServiceServer) GetBoulder(context.Context, *GetBoulderRequest) (*GetBoulderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoulder not implemented")
}
func (UnimplementedBoulderApproachServiceServer) ListBoulders(context.Context, *ListBouldersRequest) (*ListBouldersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBoulders not implemented")
}
func (UnimplementedBoulderApproachServiceServer) CreateApproach(context.Context, *CreateApproachRequest) (*CreateApproachResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApproach not implemented")
}
func (UnimplementedBoulderApproachServiceServer) mustEmbedUnimplementedBoulderApproachServiceServer() {
}

// UnsafeBoulderApproachServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoulderApproachServiceServer will
// result in compilation errors.
type UnsafeBoulderApproachServiceServer interface {
	mustEmbedUnimplementedBoulderApproachServiceServer()
}

func RegisterBoulderApproachServiceServer(s grpc.ServiceRegistrar, srv BoulderApproachServiceServer) {
	s.RegisterService(&BoulderApproachService_ServiceDesc, srv)
}

func _BoulderApproachService_GetApproach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApproachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoulderApproachServiceServer).GetApproach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoulderApproachService_GetApproach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoulderApproachServiceServer).GetApproach(ctx, req.(*GetApproachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoulderApproachService_GetBoulder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoulderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoulderApproachServiceServer).GetBoulder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoulderApproachService_GetBoulder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoulderApproachServiceServer).GetBoulder(ctx, req.(*GetBoulderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoulderApproachService_ListBoulders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBouldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoulderApproachServiceServer).ListBoulders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoulderApproachService_ListBoulders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoulderApproachServiceServer).ListBoulders(ctx, req.(*ListBouldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoulderApproachService_CreateApproach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApproachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoulderApproachServiceServer).CreateApproach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoulderApproachService_CreateApproach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoulderApproachServiceServer).CreateApproach(ctx, req.(*CreateApproachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoulderApproachService_ServiceDesc is the grpc.ServiceDesc for BoulderApproachService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoulderApproachService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.BoulderApproachService",
	HandlerType: (*BoulderApproachServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApproach",
			Handler:    _BoulderApproachService_GetApproach_Handler,
		},
		{
			MethodName: "GetBoulder",
			Handler:    _BoulderApproachService_GetBoulder_Handler,
		},
		{
			MethodName: "ListBoulders",
			Handler:    _BoulderApproachService_ListBoulders_Handler,
		},
		{
			MethodName: "CreateApproach",
			Handler:    _BoulderApproachService_CreateApproach_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "boulder_service.proto",
}
